openapi: 3.0.0
info:
  title: Cinema Management API
  version: 0.1.0
  description: |
    API for managing cinema resources such as movies, rooms, sessions, reservations, and users.
    Provides user authentication, seat reservations, and admin functionalities.
  contact:
    name: Khalid Hissoune
  servers:
    - url: "http://localhost:3000/api/"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/UserResponse"
    Register:
      type: object
      properties:
        name:
          type: string
        email:  
          type: string
        password:
          type: string   
    RegisterResponse:
      type: object  
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"         
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
    Movie:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        genre:
          type: string
        releaseDate:
          type: string
          format: date
    Room:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        seats:
          type: array
          items:
            type: integer
    Session:
      type: object
      properties:
        id:
          type: string
        movie:
          $ref: "#/components/schemas/Movie"
        room:
          $ref: "#/components/schemas/Room"
        startTime:
          type: string
          format: date-time
    Reservation:
      type: object
      properties:
        session:
          $ref: "#/components/schemas/Session"
        seatNumber:
          type: integer
    ReservationResponse:
      type: object
      properties:
        id:
          type: string
        session:
          $ref: "#/components/schemas/Session"
        seatNumber:
          type: integer
        user:
          $ref: "#/components/schemas/UserResponse"

paths:
  "/auth/login":
    post:
      tags:
        - Auth
      summary: Log in a user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        400:
          description: Invalid login credentials
      security: []  # No authentication needed for login

  "/auth/register":
    post:
      tags:
        - Auth
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        200:
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        400:
          description: Error

  "/admins/":
    post:
      tags:
        - User
      summary: Create a new user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        400:
          description: Invalid input data
      security:
        - BearerAuth: []  # Requires authentication

  "/movies/":
    get:
      tags:
        - Movies
      summary: Get all movies
      responses:
        200:
          description: List of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
      security:
        - BearerAuth: []  # Requires authentication             

  "/movies/{id}":
    get:
      tags:
        - Movies
      summary: Get a movie by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the movie
          schema:
            type: string
      responses:
        200:
          description: Movie details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        404:
          description: Movie not found
      security:
        - BearerAuth: []  # Requires authentication 

  "/rooms/":
    get:
      tags:
        - Rooms
      summary: Get all rooms
      responses:
        200:
          description: List of cinema rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Room"
      security:
        - BearerAuth: []  # Requires authentication                  

  "/rooms/{id}":
    get:
      tags:
        - Rooms
      summary: Get a room by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the room
          schema:
            type: string
      responses:
        200:
          description: Room details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        404:
          description: Room not found
      security:
        - BearerAuth: []  # Requires authentication 

  "/sessions/":
    get:
      tags:
        - Sessions
      summary: Get all sessions
      responses:
        200:
          description: List of movie sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Session"
      security:
        - BearerAuth: []  # Requires authentication                  

  "/sessions/{id}":
    get:
      tags:
        - Sessions
      summary: Get a session by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the session
          schema:
            type: string
      responses:
        200:
          description: Session details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        404:
          description: Session not found
      security:
        - BearerAuth: []  # Requires authentication 

  "/reservations/":
    post:
      tags:
        - Reservations
      summary: Make a reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        201:
          description: Reservation made successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationResponse"
        400:
          description: Invalid reservation data
      security:
        - BearerAuth: []  # Requires authentication

  "/reservations/{id}":
    get:
      tags:
        - Reservations
      summary: Get a reservation by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the reservation
          schema:
            type: string
      responses:
        200:
          description: Reservation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationResponse"
        404:
          description: Reservation not found
      security:
        - BearerAuth: []  # Requires authentication 

    delete:
      tags:
        - Reservations
      summary: Delete a reservation by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the reservation
          schema:
            type: string
      responses:
        200:
          description: Reservation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Reservation not found
      security:
        - BearerAuth: []  # Requires authentication 
